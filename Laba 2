#include <iostream>
#include <math.h>
using namespace std;

class Triangle
{
private:
	class Point
	{
	private:
		double x;
		double y;
		double z;

	public:
		Point() :x(0), y(0),z(0)
		{}

		void setpoint(double x, double y)
		{
			this->x = x;
			this->y = y;
		}
		double getx()
		{

			return this->x;

		}
		double gety()
		{

			return this->y;

		}
		void getpoint()
		{

			cout << "Координаты точки : " << this->x << " " << this->y << "\n";

		}

	};
	struct Vector
	{
	    double x = 0;
		double y = 0;
		double z = 0;
	};

	Point P1;
	Point P2;
	Point P3;


public:
	void Vectornoe(double xa, double ya, double xb, double yb, double xc, double yc, double xd, double yd)
	{
		double A1 = ((xd - xa) * (yb - ya) - (yd - ya) * (xb - xa)) * ((xc - xa) * (yb - ya) - (yc - ya) * (xb - xa));
		double B1 = ((xd - xb) * (yc - yb) - (yd - yb) * (xc - xb)) * ((xa - xb) * (yc - yb) - (ya - yb) * (xc - xb));
		double C1 = ((xd - xc) * (ya - yc) - (yd - yc) * (xa - xc)) * ((xb - xc) * (ya - yc) - (yb - yc) * (xa - xc));
	
		
		int i = 0;
		if ((A1 > 0 && B1 > 0 && C1 > 0) || (A1 < 0 && B1 < 0 && C1 < 0))
		{
			i++;
			cout << "Точка принадлежит треугольнику" << "\n";
		}
		if ((A1 == 0 && B1 != 0 && C1 != 0) || (A1 != 0 && B1 == 0 && C1 != 0) || (A1 != 0 && B1 != 0 && C1 == 0))
		{
			i++;
			int q = 0;
			if (xd == xa && xd == xb)
			{
				
				
					if ((yd > ya )|| (yd < ya))
					{
						q++;
						cout << "Точка лежит вне треугольника на продолжении стороны AB" << "\n";
					}
				   
					
				
			
			}
			if (xd == xb && xd == xc)
			{
			
				if ((yd < yb) || (yd > yc))
				{
					q++;
					cout << "Точка лежит вне треугольника на продолжении стороны BC" << "\n";
				}
			
			}
			if (xd == xc && xd == xa)
			{
			
				if ((yd < yc) || (yd > ya))
				{
					q++;
					cout << "Точка лежит вне треугольника на продолжении стороны CA" << "\n";
				}
			
			
			}
			if (yd == ya && yd == yb)
			{
			
				if ((xd>xa) || (xd<xb))
				{
					q++;
					cout << "Точка лежит вне треугольника на продолжении стороны AB" << "\n";
				}
			
			
			
			}
			if (yd == yb && yd == yc)
			{
			
				if ((xd>xc) || (xd<xb))
				{
					q++;
					cout <<"Точка лежит вне треугольника на продолжении стороны BC" << "\n";
				
				}
			
			
			}
			if (yd == yc && yd == ya)
			{
			
				if ((xd > xa) || (xd < xc))
				{
					q++;
					cout<< "Точка лежит вне треугольника на продолжении стороны CA" << "\n";
				}
			
			
			}
			if (q == 0)
			{
				int P = 0;
				double Z = 0;
				for (P = 0; P<100; P++)
				{
					Z = Z + 0.1*P;
					if ((((xd == xb - P) && (yd == yb + P)) || ((xd == xc + P) && (yd == yc - P)))|| (((xd == xc - P) && (yd == yc + P)) || ((xd == xb + P) && (yd == yb - P))))

					{
						q++;
						cout << "Точка лежит вне треугольника на продолжении гипотенузы " << "\n";//BC
					}

				}
			
			}
			if (q == 0)
			{
				int P = 0;
				double Z = 0;
				for (P = 0; P < 100; P++)
				{
					Z = Z + 0.1 * P;
					if ((((xd == xa - P) && (yd == ya + P)) || ((xd == xb + P) && (yd == yb - P)))||(((xd == xb - P) && (yd == yb + P)) || ((xd == xa + P) && (yd == ya - P))))

					{
						q++;
						cout << "Точка лежит вне треугольника на продолжении гипотенузы " << "\n";//AB
					}

				}

			}
			if (q == 0)
			{
				int P = 0;
				double Z = 0;
				for (P = 0; P < 100; P++)
				{
					Z = Z + 0.1 * P;
					if ((((xd == xc - P) && (yd == yc + P)) || ((xd == xa + P) && (yd == ya - P)))|| (((xd == xa - P) && (yd == ya + P)) || ((xd == xc + P) && (yd == yc - P))))

					{
						q++;
						cout << "Точка лежит вне треугольника на продолжении гипотенузы " << "\n";//CA
					}

				}

			}



			
			if (q == 0)
			{
				cout << "Точка лежит на стороне треугольника" << "\n";
			}
		}
		if ((A1 == 0 && B1 == 0 && C1 != 0) || (A1 != 0 && B1 == 0 && C1 == 0) || (A1 == 0 && B1 != 0 && C1 == 0))
		{
			i++;
			cout << "Точка совпадает с вершиной треугольника" << "\n";
		}
		if (i == 0)
		{
			cout << "Точка не принадлежит треугольнику" << "\n";
		}

			
		
	
	}

	void SetTriangleFirst()
	{
		double x1, x2, x3, y1, y2, y3;


		cout << "Введите координаты вершин прямоугольного треугольника";
		cout << "\n";
		cin >> x1;  cin >> y1; cout << "\n";
		cin >> x2;  cin >> y2; cout << "\n";
		cin >> x3;  cin >> y3; cout << "\n";
	
			P1.setpoint(x1, y1);
			P2.setpoint(x2, y2);
			P3.setpoint(x3, y3);
		

	}


	void PointSearch() //Поиск точки в области треугольника
	{
		Point A;
		int Ax, Ay;
		cout << "Введите координаты искомой точки" << "\n";
		cin >> Ax;
		cin >> Ay;
		A.setpoint(Ax, Ay);
		if (Recorded() == true) {
			cout << "Использовать данные координат треугольника из предыдущего пункта ?" << "\n" << "y-да" << "\n" << "n-нет" << "\n";
			char als = 'z';
			while (als != 'n' && als != 'y') {
				cin >> als;
				if (als != 'n' && als != 'y')
				{
					cout << "Введенный вами символ не верен!" << "\n";
					cout << "Попробуйте еще раз!" << "\n";
					cin >> als;

				}
			}
			if (als == 'y')
			{
				double  X1, X2, X3, Y1, Y2, Y3;

				X1 = P1.getx();
				X2 = P2.getx();
				X3 = P3.getx();
				Y1 = P1.gety();
				Y2 = P2.gety();
				Y3 = P3.gety();
				Vectornoe(X1, Y1, X2, Y2, X3, Y3, Ax, Ay);





			}
			if (als == 'n')
			{
				SetTriangleFirst();
				double  X1, X2, X3, Y1, Y2, Y3;

				X1 = P1.getx();
				X2 = P2.getx();
				X3 = P3.getx();
				Y1 = P1.gety();
				Y2 = P2.gety();
				Y3 = P3.gety();

				Vectornoe(X1, Y1, X2, Y2, X3, Y3, Ax, Ay);
			}
		}

		if (Recorded() == false) {
			cout << "Данных о треугольнике еще не вносилось" << "\n";
			SetTriangleFirst();
			double  X1, X2, X3, Y1, Y2, Y3;

			X1 = P1.getx();
			X2 = P2.getx();
			X3 = P3.getx();
			Y1 = P1.gety();
			Y2 = P2.gety();
			Y3 = P3.gety();
			
			Vectornoe(X1, Y1, X2, Y2, X3, Y3, Ax, Ay);
		}
	


		if (Recorded() == false) {
			cout << "Данных о треугольнике еще не вносилось" << "\n";
			SetTriangleFirst();
			double X1, X2, X3, Y1, Y2, Y3;
			X1 = P1.getx();
			X2 = P2.getx();
			X3 = P3.getx();
			Y1 = P1.gety();
			Y2 = P2.gety();
			Y3 = P3.gety();

			Vectornoe(X1, Y1, X2, Y2, X3, Y3, Ax, Ay);
		}

}

bool Recorded() //Проверка на заполненность координат 
{
	double  X1, X2, X3, Y1, Y2, Y3;
	X1 = P1.getx();
	X2 = P2.getx();
	X3 = P3.getx();
	Y1 = P1.gety();
	Y2 = P2.gety();
	Y3 = P3.gety();
	if (X1 == 0 && X2 == 0 && X3 == 0 && Y1 == 0 && Y2 == 0 && Y3 == 0)
	{
		return false;
	}
	else { return true; }



}
void ShowSquare() //Вычисление Плошади
{

	if (Recorded() == true) {
		cout << "Использовать данные координат треугольника из предыдущего пункта?" << "\n" << "y-да" << "\n" << "n-нет" << "\n";
		char als = 'z';
		while (als != 'n' && als != 'y') {
			cin >> als;
			if (als != 'n' && als != 'y')
			{
				cout << "Введенный вами символ не верен!" << "\n";
				cout << "Попробуйте еще раз!" << "\n";
				cin >> als;

			}
			if (als == 'y')
			{
				double P, S, a, b, c;

				double X1, X2, X3, Y1, Y2, Y3;
				X1 = P1.getx();
				X2 = P2.getx();
				X3 = P3.getx();
				Y1 = P1.gety();
				Y2 = P2.gety();
				Y3 = P3.gety();
				a = 0;
				b = 0;
				c = 0;
				a = sqrt((X2 - X1) * (X2 - X1) + (Y2 - Y1) * (Y2 - Y1)); //AB
				b = sqrt((X3 - X2) * (X3 - X2) + (Y3 - Y2) * (Y3 - Y2)); //BC
				c = sqrt((X1 - X3) * (X1 - X3) + (Y1 - Y3) * (Y1 - Y3)); //CA
				P = (a + b + c) / 2;
				S = sqrt(P * (P - a) * (P - b) * (P - c));
				cout << S << "\n";
			}
			if (als == 'n')
			{
				SetTriangleFirst();

				double P, S, a, b, c;

				double  X1, X2, X3, Y1, Y2, Y3;
				X1 = P1.getx();
				X2 = P2.getx();
				X3 = P3.getx();
				Y1 = P1.gety();
				Y2 = P2.gety();
				Y3 = P3.gety();
				a = 0;
				b = 0;
				c = 0;
				a = sqrt((X2 - X1) * (X2 - X1) + (Y2 - Y1) * (Y2 - Y1)); //AB
				b = sqrt((X3 - X2) * (X3 - X2) + (Y3 - Y2) * (Y3 - Y2)); //BC
				c = sqrt((X1 - X3) * (X1 - X3) + (Y1 - Y3) * (Y1 - Y3)); //CA
				P = (a + b + c) / 2;
				S = sqrt(P * (P - a) * (P - b) * (P - c));
				cout << S << "\n";




			}

		}


	}

	if (Recorded() == false) {
		cout << "Данных о треугольнике еще не вносилось" << "\n";
		SetTriangleFirst();

		double P, S, a, b, c;

		double  X1, X2, X3, Y1, Y2, Y3;
		X1 = P1.getx();
		X2 = P2.getx();
		X3 = P3.getx();
		Y1 = P1.gety();
		Y2 = P2.gety();
		Y3 = P3.gety();
		a = 0;
		b = 0;
		c = 0;
		a = sqrt((X2 - X1) * (X2 - X1) + (Y2 - Y1) * (Y2 - Y1)); //AB
		b = sqrt((X3 - X2) * (X3 - X2) + (Y3 - Y2) * (Y3 - Y2)); //BC
		c = sqrt((X1 - X3) * (X1 - X3) + (Y1 - Y3) * (Y1 - Y3)); //CA
		P = (a + b + c) / 2;
		S = sqrt(P * (P - a) * (P - b) * (P - c));
		cout << "Вычисленное значение площади: " << S << "\n";
	}





}


void ShowPoints()
{
	P1.getpoint();
	P2.getpoint();
	P3.getpoint();

}
};
void main()
{

	Triangle A;
	while (true)
	{
		setlocale(LC_ALL, "RUS");
		cout << "Выберите что-нибудь: 0-Выход,1-Задать параметры треугольника,2-Показать координаты,3-Площадь треугольника,4-Поиск точки" << "\n";
		int c = 0;
		cin >> c;
		switch (c)
		{
		
		case 0: {exit(0); break; }
		case 1: {A.SetTriangleFirst(); break; }
		case 4: {A.PointSearch(); break;  }
		case 3: {A.ShowSquare(); break;  }
		case 2: {A.ShowPoints(); break;  }

		}




	}



}



Прямоугольный треугольник со сторонами, параллельными осям координат. Разработать параметрические конструкторы задающие объект тремя различными способами.
Разработать методы: определения нахождения точки с заданными координатами внутри фигуры; вычисления площади фигуры.
